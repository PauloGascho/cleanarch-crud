plugins {
    id 'application'
    id 'org.springframework.boot' version '2.3.4.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
}

def springRelease = '2.3.4.RELEASE'

dependencies {
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: springRelease
    compile group: 'org.springframework.boot', name: 'spring-boot', version: springRelease
    compile group: 'org.springframework.boot', name: 'spring-boot-starter', version: springRelease
    compile group: 'org.springframework', name: 'spring-context', version: '5.2.4.RELEASE'

    compile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: springRelease
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-validation', version: springRelease
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: springRelease
    compile group: 'org.springframework.boot', name: 'spring-boot-autoconfigure', version: springRelease

    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: springRelease

    testCompile('org.projectlombok:lombok:1.18.8')
    testAnnotationProcessor('org.projectlombok:lombok:1.18.8')
    compileOnly 'org.projectlombok:lombok:1.18.8'
    annotationProcessor 'org.projectlombok:lombok:1.18.8'
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.11.1'


    implementation(project(':usecases'))
    implementation(project(':persistence'))
    implementation(project(':rest_api_spring'))


    compile group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-hibernate5', version: '2.12.1'

    components {
        withModule('org.springframework:spring-beans') {
            allVariants {
                withDependencyConstraints {
                    // Need to patch constraints because snakeyaml is an optional dependency
                    it.findAll { it.name == 'snakeyaml' }.each { it.version { strictly '1.19' } }
                }
            }
        }
    }
}

mainClassName = 'br.com.almode.cleanarch.CleanArchAlmodeApplication'

jar {
    // Define the main class for the application
    enabled = true

    manifest {
        attributes("Main-Class": "br.com.almode.cleanarch.CleanArchAlmodeApplication")
    }
}

bootJar {
    // Define the main class for the application
    classifier = 'boot'
    mainClassName = 'br.com.almode.cleanarch.CleanArchAlmodeApplication'
}

test {
    systemProperty "file.encoding", "utf-8"
}